//! <https://www.codewars.com/kata/5467e4d82edf8bbf40000155/train/rust>

const TABLE: [(u64, u64); 21] = [
    (1, 0),
    (10, 1),
    (100, 11),
    (1000, 111),
    (10000, 1111),
    (100000, 11111),
    (1000000, 111111),
    (10000000, 1111111),
    (100000000, 11111111),
    (1000000000, 111111111),
    (10000000000, 1111111111),
    (100000000000, 11111111111),
    (1000000000000, 111111111111),
    (10000000000000, 1111111111111),
    (100000000000000, 11111111111111),
    (1000000000000000, 111111111111111),
    (10000000000000000, 1111111111111111),
    (100000000000000000, 11111111111111111),
    (1000000000000000000, 111111111111111111),
    (10000000000000000000, 1111111111111111111),
    (7766279631452241920, 11111111111111111111),
];

pub fn descending_order(mut x: u64) -> u64 {
    let mut digits = [0u8; 10];

    while x != 0 {
        unsafe {
            *digits.get_unchecked_mut((x % 10) as usize) += 1;
        }
        x /= 10;
    }

    for (i, &n) in digits.iter().enumerate().rev() {
        let (a, b) = unsafe { TABLE.get_unchecked(n as usize) };
        x = x * a + b * i as u64;
    }

    x
}
