//! <https://www.codewars.com/kata/5559e4e4bbb3925164000125/train/rust>

use num_bigint::BigUint;

pub fn fib_rabbits(n: u8, b: u8) -> BigUint {
    if n == 0 {
        return 0u8.into();
    }
    if n <= PRECISION_TABLE_F64[b as usize] {
        return fib_rabbits_f64(n, b);
    }
    if n <= PRECISION_TABLE_U64[b as usize] {
        return fib_rabbits_u64(n, b).into();
    }
    if n <= PRECISION_TABLE_U128[b as usize] {
        return fib_rabbits_u128(n, b).into();
    }

    let mut prev_prev = 0u8.into();
    let mut prev = 1u8.into();
    for _ in 0..n - 1 {
        (prev, prev_prev) = (b * prev_prev + &prev, prev);
    }
    prev
}

fn fib_rabbits_f64(n: u8, b: u8) -> BigUint {
    let n = n as i32;
    let t = (b as f64).mul_add(4., 1.).sqrt();
    ((((1. + t).powi(n) - (1. - t).powi(n)) / t * 2f64.powi(-n)) as u64).into()
}

fn fib_rabbits_u64(n: u8, b: u8) -> u64 {
    let b = b as u64;
    let mut prev_prev = 0;
    let mut prev = 1;
    for _ in 0..n - 1 {
        (prev, prev_prev) = (b * prev_prev + prev, prev);
    }
    prev
}

fn fib_rabbits_u128(n: u8, b: u8) -> u128 {
    let b = b as u128;
    let mut prev_prev = 0;
    let mut prev = 1;
    for _ in 0..n - 1 {
        (prev, prev_prev) = (b * prev_prev + prev, prev);
    }
    prev
}

const PRECISION_TABLE_F64: [u8; 256] = [
    255, 9, 52, 41, 37, 3, 34, 1, 31, 2, 8, 26, 27, 0, 25, 6, 1, 1, 2, 1, 24, 4, 1, 3, 2, 22, 2, 1,
    20, 20, 21, 20, 5, 20, 1, 10, 19, 2, 4, 2, 1, 1, 20, 6, 4, 3, 1, 19, 2, 1, 18, 18, 18, 1, 2, 1,
    18, 17, 0, 17, 17, 17, 2, 0, 17, 2, 5, 16, 2, 16, 1, 1, 17, 17, 2, 4, 2, 16, 4, 16, 17, 12, 4,
    1, 4, 16, 2, 16, 1, 16, 17, 1, 2, 1, 4, 15, 2, 16, 1, 1, 15, 1, 1, 8, 1, 15, 1, 15, 15, 15, 16,
    15, 1, 3, 1, 4, 2, 1, 1, 15, 1, 2, 15, 15, 1, 1, 2, 15, 1, 15, 4, 2, 16, 15, 5, 14, 1, 1, 1,
    15, 2, 1, 14, 1, 15, 1, 4, 4, 1, 1, 11, 14, 14, 14, 1, 2, 15, 14, 1, 1, 14, 1, 15, 1, 4, 15, 1,
    1, 1, 1, 1, 14, 14, 1, 1, 14, 1, 1, 14, 1, 6, 14, 15, 1, 4, 1, 1, 3, 14, 1, 14, 5, 14, 14, 1,
    1, 8, 1, 8, 1, 1, 4, 1, 2, 14, 2, 2, 15, 1, 3, 14, 1, 6, 14, 14, 3, 1, 1, 14, 13, 4, 14, 1, 3,
    1, 4, 14, 2, 13, 2, 14, 14, 14, 14, 2, 2, 5, 14, 4, 1, 14, 5, 13, 2, 13, 1, 13, 1, 13, 13, 1,
    1, 3, 1, 0, 13,
];

const PRECISION_TABLE_U64: [u8; 256] = [
    255, 93, 65, 54, 48, 44, 41, 39, 37, 36, 35, 34, 33, 32, 31, 31, 30, 30, 29, 29, 28, 28, 28,
    27, 27, 27, 27, 26, 26, 26, 26, 25, 25, 25, 25, 25, 24, 24, 24, 24, 24, 24, 24, 24, 23, 23, 23,
    23, 23, 23, 23, 23, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 21, 21, 21, 21, 21, 21,
    21, 21, 21, 21, 21, 21, 21, 21, 21, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
    20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 18, 18, 18, 18, 18, 18, 18, 18, 18,
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
    18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 16, 16, 16, 16,
];

const PRECISION_TABLE_U128: [u8; 256] = [
    255, 186, 129, 107, 95, 87, 82, 77, 74, 71, 69, 67, 65, 63, 62, 61, 60, 59, 58, 57, 56, 55, 55,
    54, 53, 53, 52, 52, 51, 51, 50, 50, 50, 49, 49, 48, 48, 48, 48, 47, 47, 47, 46, 46, 46, 46, 45,
    45, 45, 45, 45, 44, 44, 44, 44, 44, 43, 43, 43, 43, 43, 43, 43, 42, 42, 42, 42, 42, 42, 42, 41,
    41, 41, 41, 41, 41, 41, 41, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 39, 39, 39, 39, 39, 39, 39,
    39, 39, 39, 39, 39, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 37, 37, 37, 37,
    37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
    36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
    35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
    34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 33, 33, 33,
    33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
    33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 32, 32, 32, 32, 32, 32, 32,
];
